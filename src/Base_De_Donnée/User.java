
package Base_De_Donnée;

import Application.BDD;
import Application.Parameter;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;



public class User extends javax.swing.JFrame {

   
    BDD db;
    public User() {
        initComponents();
         setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        filepath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Verification_insertion_BD = new javax.swing.JButton();
        Retour = new javax.swing.JButton();
        Verification_insertion_BD1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Microsoft New Tai Lue", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Bienvenue dans votre Espace");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        filepath.setBackground(new java.awt.Color(0, 0, 0));
        filepath.setForeground(new java.awt.Color(255, 255, 255));
        filepath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filepathActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Microsoft New Tai Lue", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Vérification du fichier de virement : ");

        Verification_insertion_BD.setBackground(new java.awt.Color(204, 0, 0));
        Verification_insertion_BD.setForeground(new java.awt.Color(255, 255, 255));
        Verification_insertion_BD.setText("Choisir le fichier");
        Verification_insertion_BD.setBorder(null);
        Verification_insertion_BD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Verification_insertion_BDActionPerformed(evt);
            }
        });

        Retour.setBackground(new java.awt.Color(204, 0, 0));
        Retour.setForeground(new java.awt.Color(255, 255, 255));
        Retour.setText("Retour");
        Retour.setBorder(null);
        Retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetourActionPerformed(evt);
            }
        });

        Verification_insertion_BD1.setBackground(new java.awt.Color(204, 0, 0));
        Verification_insertion_BD1.setForeground(new java.awt.Color(255, 255, 255));
        Verification_insertion_BD1.setText("Vérifier Et Enregistrer");
        Verification_insertion_BD1.setBorder(null);
        Verification_insertion_BD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Verification_insertion_BD1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(filepath, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(Verification_insertion_BD, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap(66, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(Verification_insertion_BD1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Retour, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filepath, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Verification_insertion_BD, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 319, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Retour, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Verification_insertion_BD1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36))))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Verification_insertion_BDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Verification_insertion_BDActionPerformed
    JFileChooser chooser=new JFileChooser();
    chooser.showOpenDialog(null);
    File f = chooser.getSelectedFile();
    String filename=f.getAbsolutePath();
    filepath.setText(filename);
    
    }//GEN-LAST:event_Verification_insertion_BDActionPerformed

    private void RetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetourActionPerformed
        Login L=new Login();
        L.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_RetourActionPerformed

    private void filepathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filepathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filepathActionPerformed
    private boolean VerificationDate(String dateE)
    {
        if(dateE.equals("00000000"))
            return true;
        else
        {
            String year=dateE.substring(0,4);
            String month=dateE.substring(4,6);
            System.out.println(month);
            String day=dateE.substring(6,8);
            System.out.println(day);
            int y=Integer.parseInt(year);
            int m=Integer.parseInt(month);
            int d=Integer.parseInt(day);
            if(y<1960)
                return false;
            if(m==1 || m==3 || m==5 || m==7 || m==8 || m==10 || m==12)
            {
                if(d<1 || d>31)
                    return false;
            }
            else if (m==4 || m==6 || m==9 || m==11)
            {
                if(d<1 || d>30)
                    return false;
            }
            else if(m==2)
            {
                if((y%100)==0 && (y%400)==0)
                {
                    if(d<1 || d>29)
                        return false;
                }
                else
                {
                    if(d<1 || d>28)
                        return false;
                }
            }
            
            }
           return true; 
    }
    
    private void Verification_insertion_BD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Verification_insertion_BD1ActionPerformed
        String filename=filepath.getText(); // pour avoir le nom du fichier à ouvrir
        db=new BDD(new Parameter().HOST_DB,new Parameter().USERNAME_DB,new Parameter()
            .PASSWORD_DB,new Parameter().IPHOST,new Parameter().PORT);
        try
        {    
        FileReader reader=new FileReader(filename); // declarer un reader
        BufferedReader bufferedReader=new BufferedReader(reader);
        String line=bufferedReader.readLine(); //lire la premiere ligne
        if(line.length()!=160)
        {
        JOptionPane.showMessageDialog(this,"le fichier de virement est incomplet");
        return;
        }
        String CodeE=line.substring(0,2);
        String CodeBanqueDest=line.substring(2,4);
        String RIB_D=line.substring(4,24);
            
            String DateE=line.substring(24,32);
            
            String NumFichier=line.substring(32,52);
            String CodeRegistre=line.substring(52,67);
            String Nbr_Tot_Im_virement=line.substring(67,77);
            int nbr=Integer.parseInt(Nbr_Tot_Im_virement);
            String Montant_Tot=line.substring(77,89);
            int tot=Integer.parseInt(Montant_Tot);
            String ContrePartie=line.substring(89,109);
            String filler=line.substring(109,160);
            int cpt=0;
            int somme=0;
            boolean isCorrect=true;
            while((line=bufferedReader.readLine())!=null)
            {
               if(line.length()!=160)
               {
               JOptionPane.showMessageDialog(this,"le fichier de virement est incomplet");
               return;
               }  
               String CodeE_IM=line.substring(0,2); 
              
              
              String CodeBanqueBen=line.substring(2,4);    
              String RIB_DO=line.substring(4,24);
              String RIB_B=line.substring(24,44);
              String numDossier=line.substring(44,64);
              String motif=line.substring(64,114);
              String Montant_det_v=line.substring(114,124);
              int x=Integer.parseInt(Montant_det_v);
              somme=somme+x;
              String CodeMotif=line.substring(124,126);
              String Zone_inutilise=line.substring(126,160);
              cpt++;
             
              if(!CodeE_IM.equals("02"))
              {JOptionPane.showMessageDialog(this,"le code de l'enregistrement de l'image virement est incorrect");
              isCorrect=false;
              break;}
              
              
              else if(!(CodeBanqueBen.length()==2 && CodeBanqueBen.matches("[0-9]+") ))
              {    
              JOptionPane.showMessageDialog(this,"le code de la banque du bénéficiaire est incorrect");
              isCorrect=false;
              
              break;
              }
              else if(!RIB_DO.equals("12026000003301684247"))
              {
              JOptionPane.showMessageDialog(this,"le relevé de l'identité bancaire ou postale du donneur d'ordre est incorrect");
              isCorrect=false;
              
              break;
              }
              else if(!(RIB_B.length()==20 && RIB_B.matches("[0-9]+") ))
              {    
              JOptionPane.showMessageDialog(this,"le relevé de l'identité bancaire ou postale du bénéficiaire du virement est incorrect");
              isCorrect=false;
              
              break;
              }
              else if(!(numDossier.length()==20 && numDossier.matches("[0-9]+")))
              {JOptionPane.showMessageDialog(this,"le numéro ou référence du dossier relatif au paiement est incorrect");
              isCorrect=false;
              
              break;
              }
              else if(motif.length()!=50)
              {JOptionPane.showMessageDialog(this,"le motif de l'operation est incomplet");
              isCorrect=false;
              
              break;
              }
              else if(!(Montant_det_v.length()==10 && Montant_det_v.matches("[0-9]+")))
              {JOptionPane.showMessageDialog(this,"le montant détail du virement est incorrect");   
              isCorrect=false;
              
              break;
              }
              else if(!(CodeMotif.equals("  ") || CodeMotif.length()==2 && CodeMotif.matches("[0-9]+")))
              {JOptionPane.showMessageDialog(this,"le code motif de rejet est incorrect");
              isCorrect=false;
             
              break;
              }
              else if(!Zone_inutilise.equals("0000000000000000000000000000000000"))
              {JOptionPane.showMessageDialog(this,"la zone inutilisée doit contenir 34 zéros");
              isCorrect=false;
              
              break;
              }
              System.out.println("we are here 9");
            }
            System.out.println("we are here 10");
        reader.close();
        System.out.println("we are here 11");
       
        if (!isCorrect)
        {
        JOptionPane.showMessageDialog(this,"Le fichier de virement ne peut pas étre enregisté");
        return;
        }
        else
        {
            
           if(!CodeE.equals("09"))
           {JOptionPane.showMessageDialog(this,"le code de l'enregistrement est incorrect");
              isCorrect=false;}
              else if(!CodeBanqueDest.equals("12"))
              {JOptionPane.showMessageDialog(this,"le code de la banque donneur d'ordre est incorrect");
              isCorrect=false;}
              else if(!RIB_D.equals("12026000003301684247"))
              {JOptionPane.showMessageDialog(this,"le relevé de l'identité bancaire ou postale du donneur d'ordre est incorrect");
              isCorrect=false;}
              else if(!VerificationDate(DateE))
              {JOptionPane.showMessageDialog(this,"la date d'échéance pour l'éxécution des virements est incorrecte");
              isCorrect=false;}
              else if(!(NumFichier.matches("[0-9]+") && NumFichier.length()==20))
              {JOptionPane.showMessageDialog(this,"la reference de l'envoi du donneur d'ordre est incorrecte");
              isCorrect=false;}
              else if(CodeRegistre.length()!=15)
              {JOptionPane.showMessageDialog(this,"le Code du registre du commerce du donneur d'ordre est incorrect ");
              isCorrect=false;}
              else if(!(nbr==cpt && Nbr_Tot_Im_virement.length()==10))
              {JOptionPane.showMessageDialog(this,"le nombre des images virement est incorrect ");
              isCorrect=false;}
              else if(!(tot==somme && Montant_Tot.length()==12))
              {
              JOptionPane.showMessageDialog(this,"le montant total du paiement par virement ");
              isCorrect=false;
              }
              
              else if(!(ContrePartie.equals("                    ") || ContrePartie.length()==20 && ContrePartie.matches("[0-9]+")))
              {
              JOptionPane.showMessageDialog(this,"la contrepartie du paiement par virement est incorrecte ");
              isCorrect=false;
              }
              else if(!filler.equals("000000000000000000000000000000000000000000000000000"))
              {
              JOptionPane.showMessageDialog(this,"le filler doit contenir 51 zéros");
              isCorrect=false; }
        }
        if (!isCorrect)
        {
        JOptionPane.showMessageDialog(this,"Le fichier de virement ne peut pas étre enregistré");
        }
        else
        {
            //insertion des données
            
            String[] Champs={"CodeE","CodeBanqueDest","RIB_D","DateE","NumFichier","CodeRegistre",
            "Nbr_Tot_Im_virement","Montant_Tot ","ContrePartie","filler","CodeE_IM",
            "CodeBanqueBen","RIB_DO","RIB_B","numDossier","motif","Montant_det_v","CodeMotif","Zone_inutilise"};
            try
            {
            FileReader reader1=new FileReader(filename); // declarer un reader
            BufferedReader bufferedReader1=new BufferedReader(reader1);
            line=bufferedReader1.readLine();
            while((line=bufferedReader1.readLine())!=null)
            {
              String CodeE_IM=line.substring(0,2); 
             
              String CodeBanqueBen=line.substring(2,4);    
              String RIB_DO=line.substring(4,24);
              String RIB_B=line.substring(24,44);
              String numDossier=line.substring(44,64);
              String motif=line.substring(64,114);
              String Montant_det_v=line.substring(114,124);
              String CodeMotif=line.substring(124,126);
              String Zone_inutilise=line.substring(126,160);
            String[] data={CodeE,CodeBanqueDest,RIB_D,DateE,NumFichier,CodeRegistre,
            Nbr_Tot_Im_virement,Montant_Tot,ContrePartie,filler,CodeE_IM,
            CodeBanqueBen,RIB_DO,RIB_B,numDossier,motif,Montant_det_v,CodeMotif,Zone_inutilise};
            System.out.println("we are here ");
            db.queryInsert("virement", Champs, data);
            
            }
         reader1.close();   
        JOptionPane.showMessageDialog(this,"Les données du fichier de virement sont bien enregistrées");   
        }
         catch (IOException e)
        {
        e.printStackTrace();
        }   
         }
            
        }
        catch (IOException e)
        {
        e.printStackTrace();
        }
        
        
        
    }//GEN-LAST:event_Verification_insertion_BD1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(User.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new User().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Retour;
    private javax.swing.JButton Verification_insertion_BD;
    private javax.swing.JButton Verification_insertion_BD1;
    private javax.swing.JTextField filepath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.jpg"))); 
    }
}

